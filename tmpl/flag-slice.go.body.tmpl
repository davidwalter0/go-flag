// {{.SliceTypeValueName}} []{{.CastTypeName}}
type {{.SliceTypeValueName}} []{{.CastTypeName}}

func new{{.SliceTypeValueName}}(val {{.SliceTypeValueName}}, p *{{.SliceTypeValueName}}) *{{.SliceTypeValueName}} {
	for i := 0; i < len(val); i++ {
		*p = append(*p, val[i])
	}
	return p
}


// Set a slice after parsing a string
func (slc *{{.SliceTypeValueName}}) Set(s string) error {
  var T = reflect.TypeOf({{.SliceTypeValueName}}{}).Elem()
  var debugging = false
  if debugging {
    fmt.Printf("%v %T\n", T,T)
  }
  {{ if (and (ne "string" .type) (ne "time.Duration" .CastTypeName)) -}}
	var n interface{}
  {{- end }}
	var l = strings.Split(s, ",")

	for _, text := range l {
    if text = strings.TrimSpace(text); len(text)>0 {
      // start {{.CastTypeName}}
      {{ $type := .type }}{{ if (eq "time.Duration" .CastTypeName) -}}
      lhs, err := time.ParseDuration(text)
      if err != nil {
        panic(err)
      }
      *slc = append(*slc, lhs)
      {{- end -}}
      {{ $type := .type }}{{- if eq "string" $type -}}
      *slc = append(*slc, text)
      {{- end -}}
      {{ $type := .type }}{{- $list := split "int8 int16 int int32 int64" -}}
      {{- range $list -}}{{- if eq $type . -}}
      n, _ = strconv.ParseInt(text, 0, T.Bits())
      *slc = append(*slc, ({{.}})(n.(int64)))
      {{- end -}}
      {{- end -}}
      {{ $type := .type }}{{- $list := split "uint8 uint16 uint uint32 uint64" -}}
      {{- range $list -}}{{- if eq $type . -}}
      n, _ = strconv.ParseUint(text, 0, T.Bits())
      *slc = append(*slc, ({{.}})(n.(uint64)))
      {{- end -}}
      {{- end -}}
      {{ $type := .type }}{{- $list := split "float32 float64" -}}
      {{- range $list -}}{{- if eq $type . -}}
      n, _ = strconv.ParseFloat(text, T.Bits())
      *slc = append(*slc, ({{.}})(n.(float64)))
      {{- end -}}
      {{- end -}}
      {{ $type := .type }}{{- $list := split "bool" -}}
      {{- range $list -}}{{- if eq $type . -}}
      n, _ = strconv.ParseBool(text)
      *slc = append(*slc, ({{.}})(n.(bool)))
      {{- end -}}
      {{- end -}}
      {{ if "" }} {{end}}
      // end {{.CastTypeName}}
    }
	}
	return nil
}

// Get get a slice interface from the value
func (slc *{{.SliceTypeValueName}}) Get() interface{} { return ([]{{.CastTypeName}})(*slc) }

// String join a string from slice
func (slc *{{.SliceTypeValueName}}) String() string {
  t := []string{}
  for _, v := range *slc {
    t = append(t, fmt.Sprintf("%v", v))
  }
  return strings.Join(t, ",")
}

// slice{{.Type}}Var defines an slice flag with specified name,
// default value, and usage string.  The argument p points to an slice
// variable in which to store the value of the flag.
func (f *FlagSet) slice{{.Type}}Var(p *{{.SliceTypeValueName}}, name string, value {{.SliceTypeValueName}}, usage string) {
	f.Var(new{{.SliceTypeValueName}}(value, p), name, usage)
}

// slice{{.Type}}Var defines an slice flag with specified name,
// default value, and usage string.  The argument p points to an slice
// variable in which to store the value of the flag.
func slice{{.Type}}Var(p *{{.SliceTypeValueName}}, name string, value {{.SliceTypeValueName}}, usage string) {
	CommandLine.Var(new{{.SliceTypeValueName}}(value, p), name, usage)
}

// slice{{.Type}} defines an slice flag with specified name, default value, and
// usage string.  The return value is the address of an slice variable
// that stores the value of the flag.
func (f *FlagSet) slice{{.Type}}(name string, value {{.SliceTypeValueName}}, usage string) *{{.SliceTypeValueName}} {
	p := new({{.SliceTypeValueName}})
	f.slice{{.Type}}Var(p, name, value, usage)
	return p
}

// slice{{.Type}} defines an slice flag with specified name, default value, and
// usage string.  The return value is the address of an slice variable
// that stores the value of the flag.
func slice{{.Type}}(name string, value {{.SliceTypeValueName}}, usage string) *{{.SliceTypeValueName}} {
	return CommandLine.slice{{.Type}}(name, value, usage)
}
